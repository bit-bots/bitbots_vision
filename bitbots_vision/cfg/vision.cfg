#!/usr/bin/env python
PACKAGE = "bitbots_vision"

from dynamic_reconfigure.parameter_generator_catkin import *

gen = ParameterGenerator()

ball_finder_enum = gen.enum([ gen.const("fcnn",      str_t, "fcnn", "fcnn classifier"),
                       gen.const("cascade",     str_t, "cascade", "cascade classifier"),
                       gen.const("dummy",      str_t, "dummy", "no balls will be detected")],
                     "An enum to set the ball classifier")

field_boundary_finder_enum = gen.enum([ gen.const("iteration",      str_t, "iteration", "searches from the top until green"),
                       gen.const("dynamic",     str_t, "dynamic", "uses head_joint_state messages to switch between methods"),
                       gen.const("reversed",     str_t, "reversed", "searches from the bottom until white"),
                       gen.const("binary",      str_t, "binary", "uses binary search")],
                     "An enum to change the field_boundary finder method")

obstacle_detector_enum = gen.enum([ gen.const("convex",      str_t, "convex", "finds obstacles using the difference of the convex and normal field boundary"),
                       gen.const("distance",     str_t, "distance", "parameters are adjusted for the height of the obstacle in the image and therefore its distance "),
                       gen.const("step",      str_t, "step", "finds obstacles using the height difference of the normal field boundary")],
                     "An enum to change the obstacle detector method")


group_vision = gen.add_group("vision", type="tab")
group_ROS = gen.add_group("ROS", type="tab")
group_ball_fcnn = gen.add_group("ball_fcnn", type="tab")
group_ball_finder = gen.add_group("ball_finder", type="tab")
group_field_boundary_finder = gen.add_group("field_boundary_finder", type="tab")
group_classifier_model = gen.add_group("classifier_model", type="tab")
group_cascade_classifier = gen.add_group("cascade_classifier", type="tab")
group_detector = gen.add_group("detector", type="tab")
group_dynamic_color_space = gen.add_group("DynamicColorSpace", type="tab")

group_color_detector = group_detector.add_group("color_detector", type="tab")
group_line_detector = group_detector.add_group("line_detector", type="tab")
group_obstacle_detector = group_detector.add_group("obstacle_detector", type="tab")

group_field_color_detector = group_color_detector.add_group("field_color_detector")
group_white_color_detector = group_color_detector.add_group("white_color_detector")
group_red_color_detector = group_color_detector.add_group("red_color_detector")
group_blue_color_detector = group_color_detector.add_group("blue_color_detector")

group_ball_fcnn.add("ball_fcnn_model_path", str_t, 0, "ball_fcnn_model_path", None)
group_ball_fcnn.add("ball_fcnn_debug", bool_t, 0, "ball_fcnn_debug", None)
group_ball_fcnn.add("ball_fcnn_threshold", double_t, 0, "ball_fcnn_threshold", min=0.0, max=1.0)
group_ball_fcnn.add("ball_fcnn_expand_stepsize", int_t, 0, "ball_fcnn_expand_stepsize", min=1, max=20)
group_ball_fcnn.add("ball_fcnn_pointcloud_stepsize", int_t, 0, "ball_fcnn_pointcloud_stepsize", min=1, max=20)
group_ball_fcnn.add("ball_fcnn_shuffle_candidate_list", bool_t, 0, "ball_fcnn_shuffle_candidate_list")
group_ball_fcnn.add("ball_fcnn_min_ball_diameter", int_t, 0, "ball_fcnn_min_ball_diameter", min=1, max=50)
group_ball_fcnn.add("ball_fcnn_max_ball_diameter", int_t, 0, "ball_fcnn_max_ball_diameter", min=1, max=600)
group_ball_fcnn.add("ball_fcnn_candidate_refinement_iteration_count", int_t, 0, "ball_fcnn_candidate_refinement_iteration_count", min=1,max=100)
group_ball_fcnn.add("ball_fcnn_publish_output", bool_t, 0, "publish the output of the ball fcnn as ImageWithCorners", None)
group_ball_fcnn.add("ball_fcnn_publish_field_boundary_offset", int_t, 0, "the offset added to the field_boundary when cropping the fcnn output for publication in pixels", min=1,max=50)

group_field_color_detector.add("field_color_detector_path", str_t, 0, "field_color_detector_path", None)
group_field_color_detector.add("field_color_detector_path_sim", str_t, 0, "field_color_detector_path_sim", None)
group_field_color_detector.add("field_color_detector_use_dummy_green", bool_t, 0, "field_color_detector_use_dummy_green", None)
group_field_color_detector.add("field_color_detector_dummy_lower_values_h", int_t, 0, "field_color_detector_dummy_lower_values_h", min=0, max=180)
group_field_color_detector.add("field_color_detector_dummy_lower_values_s", int_t, 0, "field_color_detector_dummy_lower_values_s", min=0, max=255)
group_field_color_detector.add("field_color_detector_dummy_lower_values_v", int_t, 0, "field_color_detector_dummy_lower_values_v", min=0, max=255)
group_field_color_detector.add("field_color_detector_dummy_upper_values_h", int_t, 0, "field_color_detector_dummy_upper_values_h", min=0, max=180)
group_field_color_detector.add("field_color_detector_dummy_upper_values_s", int_t, 0, "field_color_detector_dummy_upper_values_s", min=0, max=255)
group_field_color_detector.add("field_color_detector_dummy_upper_values_v", int_t, 0, "field_color_detector_dummy_upper_values_v", min=0, max=255)

group_red_color_detector.add("red_color_detector_lower_values_h", int_t, 0, "red_color_detector_lower_values_h", min=0, max=180)
group_red_color_detector.add("red_color_detector_lower_values_s", int_t, 0, "red_color_detector_lower_values_s", min=0, max=255)
group_red_color_detector.add("red_color_detector_lower_values_v", int_t, 0, "red_color_detector_lower_values_v", min=0, max=255)
group_red_color_detector.add("red_color_detector_upper_values_h", int_t, 0, "red_color_detector_upper_values_h", min=0, max=180)
group_red_color_detector.add("red_color_detector_upper_values_s", int_t, 0, "red_color_detector_upper_values_s", min=0, max=255)
group_red_color_detector.add("red_color_detector_upper_values_v", int_t, 0, "red_color_detector_upper_values_v", min=0, max=255)

group_blue_color_detector.add("blue_color_detector_lower_values_h", int_t, 0, "blue_color_detector_lower_values_h", min=0, max=180)
group_blue_color_detector.add("blue_color_detector_lower_values_s", int_t, 0, "blue_color_detector_lower_values_s", min=0, max=255)
group_blue_color_detector.add("blue_color_detector_lower_values_v", int_t, 0, "blue_color_detector_lower_values_v", min=0, max=255)
group_blue_color_detector.add("blue_color_detector_upper_values_h", int_t, 0, "blue_color_detector_upper_values_h", min=0, max=180)
group_blue_color_detector.add("blue_color_detector_upper_values_s", int_t, 0, "blue_color_detector_upper_values_s", min=0, max=255)
group_blue_color_detector.add("blue_color_detector_upper_values_v", int_t, 0, "blue_color_detector_upper_values_v", min=0, max=255)

group_white_color_detector.add("white_color_detector_lower_values_h", int_t, 0, "white_color_detector_lower_values_h", min=0, max=180)
group_white_color_detector.add("white_color_detector_lower_values_s", int_t, 0, "white_color_detector_lower_values_s", min=0, max=255)
group_white_color_detector.add("white_color_detector_lower_values_v", int_t, 0, "white_color_detector_lower_values_v", min=0, max=255)
group_white_color_detector.add("white_color_detector_upper_values_h", int_t, 0, "white_color_detector_upper_values_h", min=0, max=180)
group_white_color_detector.add("white_color_detector_upper_values_s", int_t, 0, "white_color_detector_upper_values_s", min=0, max=255)
group_white_color_detector.add("white_color_detector_upper_values_v", int_t, 0, "white_color_detector_upper_values_v", min=0, max=255)

group_field_boundary_finder.add("field_boundary_finder_search_method", str_t, 0, "field_boundary_finder_search_method", "iteration", edit_method=field_boundary_finder_enum)
group_field_boundary_finder.add("field_boundary_finder_vertical_steps", int_t, 0, "field_boundary_finder_vertical_steps", min=1, max=480)
group_field_boundary_finder.add("field_boundary_finder_horizontal_steps", int_t, 0, "field_boundary_finder_horizontal_steps", min=1, max=640)
group_field_boundary_finder.add("field_boundary_finder_roi_height", int_t, 0, "field_boundary_finder_roi_height", min=1, max=100)
group_field_boundary_finder.add("field_boundary_finder_roi_width", int_t, 0, "field_boundary_finder_roi_width", min=1, max=100)
group_field_boundary_finder.add("field_boundary_finder_roi_increase", double_t, 0, "field_boundary_finder_roi_increase", min=0, max=1.0)
group_field_boundary_finder.add("field_boundary_finder_green_threshold", int_t, 0, "field_boundary_finder_green_threshold", min=0, max=1000)
group_field_boundary_finder.add("field_boundary_finder_precision_pix", int_t, 0, "field_boundary_finder_precision_pix", min=1, max=20)
group_field_boundary_finder.add("field_boundary_finder_min_precision_pix", int_t, 0, "field_boundary_finder_min_precision_pix", min=1, max=20)
group_field_boundary_finder.add("field_boundary_finder_head_joint_threshold", double_t, 0, "field_boundary_finder_head_joint_threshold", min=-1.20, max=0.20)

group_vision.add("vision_debug_image", bool_t, 0, "vision_debug_image")
group_vision.add("vision_debug_image_msg", bool_t, 0, "vision_debug_image_msg")
group_vision.add("vision_mask_img_msg", bool_t, 0, "vision_mask_img_msg")
group_vision.add("vision_debug_printer_classes", str_t, 0, "vision_debug_printer_classes", None)
group_vision.add("vision_parallelize", bool_t, 0, "vision_parallelize")
group_vision.add("vision_use_sim_color", bool_t, 0, "vision_use_sim_color")
group_vision.add("vision_ball_classifier", str_t, 0, "vision_ball_classifier", "cascade", edit_method=ball_finder_enum)
group_vision.add("vision_ball_candidate_field_boundary_y_offset", int_t, 0, "vision_ball_candidate_field_boundary_y_offset", min=0, max=20)
group_vision.add("vision_ball_candidate_rating_threshold", double_t, 0, "vision_ball_candidate_rating_threshold", min=0.0, max=1.0)

group_obstacle_detector.add("obstacle_finder_method", str_t, 0, "obstacle_finder_method", "convex", edit_method=obstacle_detector_enum)
group_obstacle_detector.add("obstacle_color_threshold", int_t, 0, "obstacle_color_threshold", min=0, max=255)
group_obstacle_detector.add("obstacle_white_threshold", int_t, 0, "obstacle_white_threshold", min=0, max=255)
group_obstacle_detector.add("obstacle_field_boundary_diff_threshold", int_t, 0, "obstacle_field_boundary_diff_threshold", min=0, max=200)
group_obstacle_detector.add("obstacle_candidate_field_boundary_offset", int_t, 0, "obstacle_candidate_field_boundary_offset", min=0, max=500)
group_obstacle_detector.add("obstacle_candidate_min_width", int_t, 0, "obstacle_candidate_min_width", min=1, max=640)
group_obstacle_detector.add("obstacle_candidate_max_width", int_t, 0, "obstacle_candidate_max_width", min=1, max=640)
group_obstacle_detector.add("obstacle_finder_step_length", int_t, 0, "obstacle_finder_step_length", min=1, max=640)
group_obstacle_detector.add("obstacle_finder_value_increase", double_t, 0, "obstacle_finder_value_increase", min=0, max=10.0)


group_line_detector.add("line_detector_field_boundary_offset", int_t, 0, "line_detector_field_boundary_offset", min=0, max=200)
group_line_detector.add("line_detector_linepoints_range", int_t, 0, "line_detector_linepoints_range", min=200, max=20000)
group_line_detector.add("line_detector_blur_kernel_size", int_t, 0, "line_detector_blur_kernel_size", min=1, max=30)

group_ROS.add("ROS_img_msg_topic", str_t, 0, "ROS_img_msg_topic", None)
group_ROS.add("ROS_img_queue_size", int_t, 0, "ROS_img_queue_size", min=1, max=20)
group_ROS.add("ROS_ball_msg_topic", str_t, 0, "ROS_ball_msg_topic", None)
group_ROS.add("ROS_fcnn_img_msg_topic", str_t, 0, "ROS_fcnn_img_msg_topic", None)
group_ROS.add("ROS_obstacle_msg_topic", str_t, 0, "ROS_obstacle_msg_topic", None)
group_ROS.add("ROS_line_msg_topic", str_t, 0, "ROS_line_msg_topic", None)
group_ROS.add("ROS_head_joint_msg_topic", str_t, 0, "ROS_head_joint_msg_topic", None)
group_ROS.add("ROS_head_joint_state_queue_size", int_t, 0, "ROS_head_joint_state_queue_size", min=1, max=20)

group_ball_finder.add("ball_finder_classify_threshold", double_t, 0, "ball_finder_classify_threshold", min=0.0, max=1.0)
group_ball_finder.add("ball_finder_scale_factor", double_t, 0, "ball_finder_scale_factor", min=1.0, max=5.0)
group_ball_finder.add("ball_finder_min_neighbors", int_t, 0, "ball_finder_min_neighbors", min=0, max=10)
group_ball_finder.add("ball_finder_min_size", int_t, 0, "ball_finder_min_size", min=5, max=100)

group_classifier_model.add("classifier_model_path", str_t, 0, "classifier_model_path", None)
group_cascade_classifier.add("cascade_classifier_path", str_t, 0, "cascade_classifier_path", None)

group_dynamic_color_space.add("dynamic_color_space", bool_t, 0, "vision_dynamic_color_space")
group_dynamic_color_space.add("dynamic_color_space_mask_img_dyn_msg", bool_t, 0, "vision_dynamic_color_space_mask_img_dyn_msg")
group_dynamic_color_space.add("dynamic_color_space_queue_max_size", int_t, 0, "maximum size of queue that holds the latest added colors", min=1, max=100)
group_dynamic_color_space.add("dynamic_color_space_threshold", double_t, 0, "necessary amount of previously detected color in percentage", min=0.0, max=1.0)
group_dynamic_color_space.add("dynamic_color_space_kernel_radius", int_t, 0, "radius surrounding the center-element of kernel-matrix, defines relevant surrounding of pixel", min=1, max=100)

exit(gen.generate(PACKAGE, "bitbots_vision", "Vision"))
